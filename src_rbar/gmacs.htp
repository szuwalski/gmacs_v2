#if !defined(_GMACS_)
#  define _GMACS_

class model_data : public ad_comm{
  int simflag;
  int rseed;
  init_adstring datafile;
  init_adstring controlfile;
  init_adstring projectfile;
  data_int IsJittered;
  data_number sdJitter;
  data_int syr;
  data_int nyr;
  int nyrRetro;
  data_int nseason;
  data_int nfleet;
  data_int nsex;
  data_int nshell;
  data_int nmature;
  data_int nclass;
  data_int season_recruitment;
  data_int season_growth;
  data_int season_ssb;
  data_int season_N;
  data_ivector nSizeSex;
  int n_grp;
  int nlikes;
  ivector isex;
  ivector ishell;
  ivector imature;
  d3_array pntr_hmo;
  data_vector size_breaks;
  dvector mid_points;
  data_int m_prop_type;
  int m_dim;
  data_matrix m_prop_in;
  dmatrix m_prop;
  data_ivector season_type;
  data_int nCatchDF;
  data_ivector nCatchRows;
  data_3array dCatchData;
  dmatrix obs_catch;
  dmatrix obs_effort;
  d3_array dCatchData_out;
  dmatrix obs_catch_out;
  dmatrix catch_cv;
  dmatrix catch_dm;
  dmatrix catch_mult;
  ivector nFparams;
  ivector nYparams;
  d3_array fhit;
  d3_array yhit;
  dmatrix dmr;
  data_int nSurveys;
  data_int nSurveyRows;
  data_matrix dSurveyData;
  dvector obs_cpue;
  dvector cpue_cv;
  dvector cpue_sd;
  dvector cpue_cv_add;
  data_int nSizeComps_in;
  data_ivector nSizeCompRows_in;
  data_ivector nSizeCompCols_in;
  data_3array d3_SizeComps_in;
  d3_array d3_obs_size_comps_in;
  dmatrix size_comp_sample_size_in;
  dmatrix size_comp_year_in;
  dmatrix size_comp_season_in;
  data_int GrowthObsType;
  data_int nGrowthObs;
  int NGrowthInputs;
  data_matrix dGrowthData;
  dvector dPreMoltSize;
  ivector iMoltIncSex;
  dvector dMoltInc;
  dvector dMoltIncCV;
  dvector mle_alpha;
  dvector mle_beta;
  ivector iMoltInitSizeClass;
  ivector iMoltEndSizeClass;
  ivector iMoltTimeAtLib;
  ivector iMoltTrans;
  ivector iMoltFleetRecap;
  ivector iMoltYearRecap;
  ivector iMoltSampSize;
  ivector MaxGrowTimeLibSex;
  int MaxGrowTimeLib;
  data_int eof;
  data_int ntheta;
  data_matrix theta_control;
  dvector theta_ival;
  dvector theta_lb;
  dvector theta_ub;
  ivector theta_phz;
  data_int lw_type;
  int lw_dim;
  int lw_dim2;
  dvector lw_alfa;
  dvector lw_beta;
  dmatrix mean_wt_in;
  d3_array mean_wt;
  data_matrix maturity;
  data_matrix legal;
  data_int bUseCustomGrowthMatrix;
  data_int bUseGrowthIncrementModel;
  data_int bUseCustomMoltProbility;
  data_ivector nSizeClassRec;
  int maxSizeIncVaries;
  data_ivector nSizeIncVaries;
  ivector nSizeIncChanges;
  data_imatrix iYrsSizeIncChanges;
  data_ivector nMoltVaries;
  ivector nMoltChanges;
  data_imatrix iYrsMoltChanges;
  data_int BetaParRelative;
  imatrix iYrIncChanges;
  int nGrwth;
  int nSizeIncPar;
  data_matrix Grwth_control;
  dvector Grwth_ival;
  dvector Grwth_lb;
  dvector Grwth_ub;
  ivector Grwth_phz;
  d4_array CustomGrowthMatrix;
  d3_array CustomMoltProbabilityMatrix;
  int nslx;
  int nslx_pars;
  int nslx_rows_in;
  int nslx_cols_in;
  data_ivector slx_nsel_period_in;
  data_ivector slx_bsex_in;
  data_imatrix slx_type_in;
  data_ivector slx_include_in;
  data_imatrix slx_extra_in;
  data_ivector ret_nret_period_in;
  data_ivector ret_bsex_in;
  data_imatrix ret_type_in;
  data_imatrix slx_nret;
  data_imatrix ret_extra_in;
  data_ivector slx_max_at_1_in;
  data_matrix slx_control_in;
  imatrix slx_control;
  ivector slx_indx;
  ivector slx_gear;
  ivector slx_type;
  ivector slx_isex;
  ivector slx_styr;
  ivector slx_edyr;
  ivector slx_cols;
  ivector slx_npar;
  ivector slx_incl;
  ivector slx_extra;
  ivector slx_max_at_1;
  dmatrix slx_par;
  d3_array slx_priors;
  dvector slx_lb;
  dvector slx_ub;
  ivector slx_phzm;
  dvector log_slx_pars_init;
  data_int NumAsympRet;
  data_matrix AsympSel_control;
  ivector AsympSel_fleet;
  ivector AsympSel_sex;
  ivector AsympSel_year;
  dvector AsympSel_ival;
  dvector AsympSel_lb;
  dvector AsympSel_ub;
  ivector AsympSel_phz;
  data_matrix q_controls;
  dvector q_ival;
  dvector q_lb;
  dvector q_ub;
  ivector q_phz;
  ivector prior_qtype;
  dvector prior_p1;
  dvector prior_p2;
  ivector q_anal;
  dvector cpue_lambda;
  dvector cpue_emphasis;
  data_matrix cv_controls;
  dvector add_cv_ival;
  dvector add_cv_lb;
  dvector add_cv_ub;
  ivector prior_add_cv_type;
  dvector prior_add_cv_p1;
  dvector prior_add_cv_p2;
  ivector cv_phz;
  dvector log_add_cv_ival;
  dvector log_add_cv_lb;
  dvector log_add_cv_ub;
  data_matrix f_controls;
  ivector f_phz;
  ivector foff_phz;
  dvector pen_fbar;
  dvector log_pen_fbar;
  dvector log_pen_fbar_foff;
  dmatrix pen_fstd;
  dvector fbar_lb;
  dvector fbar_ub;
  dvector fdev_lb;
  dvector fdev_ub;
  dvector foff_lb;
  dvector foff_ub;
  data_ivector nAgeCompType_in;
  data_ivector bTailCompression_in;
  data_vector nvn_ival_in;
  data_ivector nvn_phz_in;
  data_ivector iCompAggregator;
  data_vector lf_lambda_in;
  data_vector lf_emphasis_in;
  int nSizeComps;
  ivector nSizeCompRows;
  ivector nSizeCompCols;
  ivector nAgeCompType;
  ivector bTailCompression;
  dvector log_nvn_ival;
  ivector nvn_phz;
  dvector lf_lambda;
  dvector lf_emphasis;
  d3_array d3_obs_size_comps;
  dmatrix size_comp_sample_size;
  dmatrix size_comp_year;
  dmatrix size_comp_season;
  ivector ilike_vector;
  int nMdev;
  data_int m_type;
  int MrelFem;
  data_int Mdev_phz_def;
  data_number m_stdev;
  data_ivector m_nNodes_sex;
  data_imatrix m_nodeyear_sex;
  data_int nSizeDevs;
  data_ivector m_size_nodeyear;
  data_int Init_Mdev;
  ivector nMdev_par_cnt;
  dvector Mdev_ival;
  dvector Mdev_lb;
  dvector Mdev_ub;
  ivector Mdev_phz;
  ivector Mdev_spec;
  data_int m_maturity;
  int n_mat_m;
  data_matrix m_mat_controls;
  dvector m_mat_ival;
  dvector m_mat_lb;
  dvector m_mat_ub;
  ivector prior_m_mat_type;
  dvector prior_m_mat_p1;
  dvector prior_m_mat_p2;
  ivector m_mat_phz;
  dvector log_m_mat_ival;
  dvector log_m_mat_lb;
  dvector log_am_mat_ub;
  data_vector model_controls;
  int rdv_syr;
  int rdv_eyr;
  int rdv_phz;
  int rec_ini_phz;
  int verbose;
  int StopAfterFnCall;
  int bInitializeUnfished;
  int bSteadyState;
  double spr_lambda;
  int nSRR_flag;
  int rec_prop_phz;
  int TurnOffPhase;
  int nthetatest;
  double init_sex_ratio;
  data_vector catch_emphasis;
  data_vector Penalty_emphasis;
  data_int eof_ctl;
  data_int Calc_MSY;
  data_ivector Ffixed;
  data_int spr_syr;
  data_int spr_nyr;
  data_int SexR_syr;
  data_int SexR_nyr;
  data_int spr_aveF_syr;
  data_int spr_aveF_nyr;
  data_number spr_target;
  data_int OFLTier;
  data_number OFLalpha;
  data_number OFLbeta;
  data_number OFLgamma;
  data_number ABCBuffer;
  data_int Compute_yield_prj;
  int Eqn_basis;
  int nproj;
  data_int pyr;
  data_int prj_Nstrat;
  data_number prj_lowF;
  data_number prj_hiF;
  data_int prj_bycatch_on;
  data_int prj_replicates;
  data_number Fixed_prj_Bmsy;
  data_int Stock_rec_prj;
  data_int Age_at_rec_prj;
  data_int prj_futRec_syr;
  data_int prj_futRec_nyr;
  data_number mean_rec_prj;
  data_number SigmaR_prj;
  data_number Prow_prj;
  data_number Initial_eps;
  data_int Apply_HCR_prj;
  data_number MeanWStateMature;
  data_number MeanWStateLegal;
  data_int max_prj;
  data_int eof_prj;
  int IsProject;
  dvector xg;
  dvector wg;
  d3_array l1_vec;
  int NVarPar;
  int PhaseGrowthPar;
  int PhaseSelexPar;
  int NfunCall;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number_vector theta;
  param_init_bounded_number_vector Grwth;
  param_init_bounded_number_vector log_slx_pars;
  param_init_bounded_number_vector Asymret;
  param_init_bounded_number_vector log_fbar;
  param_init_bounded_vector_vector log_fdev;
  param_init_bounded_number_vector log_foff;
  param_init_bounded_vector_vector log_fdov;
  param_init_bounded_vector rec_ini;
  param_init_bounded_vector rec_dev_est;
  param_vector rec_dev;
  param_init_bounded_dev_vector logit_rec_prop_est;
  param_vector logit_rec_prop;
  param_init_bounded_number_vector m_dev_est;
  param_vector m_dev;
  param_matrix m_dev_sex;
  param_vector Msize;
  param_init_bounded_number_vector m_mat_mult;
  param_init_number_vector log_vn;
  param_init_bounded_number_vector survey_q;
  param_init_bounded_number_vector log_add_cv;
  param_vector priorDensity;
  param_matrix nloglike;
  param_vector nlogPenalty;
  param_matrix sdnr_MAR_cpue;
  param_matrix sdnr_MAR_lf;
  param_vector Francis_weights;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value objfun;
  param_vector M0;
  param_number logR0;
  param_number logRbar;
  param_number logRini;
  param_vector ra;
  param_vector rbeta;
  param_number logSigmaR;
  param_number steepness;
  param_number rho;
  param_matrix logN0;
  param_vector alpha;
  param_vector beta;
  param_matrix rec_sdd;
  param_matrix gscale;
  param_matrix molt_mu;
  param_matrix molt_cv;
  param_matrix Linf;
  param_matrix Kappa;
  param_matrix SigmaKappa;
  param_matrix SigmaLinf;
  param_matrix recruits;
  param_vector res_recruit;
  param_vector xi;
  param_matrix pre_catch;
  param_matrix res_catch;
  param_matrix obs_catch_effort;
  param_matrix pre_catch_out;
  param_matrix res_catch_out;
  param_vector log_q_catch;
  param_3array molt_increment;
  param_3array molt_probability;
  param_3array molt_probability_in;
  param_3array ProbMolt;
  param_4array growth_transition;
  param_4array log_slx_capture;
  param_4array log_slx_retaind;
  param_4array log_slx_discard;
  param_3array log_high_grade;
  param_4array M;
  param_vector Mmult;
  param_matrix fout;
  param_vector finit;
  param_4array ft;
  param_4array F;
  param_4array F2;
  param_5array Z;
  param_5array Z2;
  param_6array S;
  param_4array d4_N;
  param_3array d3_newShell;
  param_3array d3_oldShell;
  param_number TempSS;
  param_vector pre_cpue;
  param_vector res_cpue;
  param_3array d3_pre_size_comps_in;
  param_3array d3_res_size_comps_in;
  param_3array d3_obs_size_comps_out;
  param_3array d3_pre_size_comps_out;
  param_3array d3_res_size_comps_out;
  param_3array d3_pre_size_comps;
  param_3array d3_res_size_comps;
  param_5array FullY;
  param_number ssb_pass;
  param_number ofltot_pass;
  param_number oflret_pass;
  param_vector log_fimpbar;
  param_vector log_fimpbarOFL;
  param_vector log_fimpbarPass;
  param_vector catch_pass;
  param_vector dvar_mid_points;
  param_vector spr_rbar;
  param_number spr_sexr;
  param_number ssbF0;
  param_number spr_bmsy;
  param_number spr_depl;
  param_number spr_cofl;
  param_number spr_fofl;
  param_number Bmsy;
  param_number SR_alpha_prj;
  param_number SR_beta_prj;
  param_number Steepness;
  param_matrix spr_yield;
  param_matrix fut_recruits;
  param_vector sd_fbar;
  param_vector sd_log_dyn_Bzero;
  param_stddev_vector sd_rbar;
  param_stddev_number sd_ssbF0;
  param_stddev_number sd_Bmsy;
  param_stddev_number sd_depl;
  param_stddev_vector sd_fmsy;
  param_stddev_vector sd_fofl;
  param_stddev_number sd_ofl;
  param_stddev_matrix sd_log_recruits;
  param_stddev_vector sd_log_ssb;
  param_stddev_number sd_last_ssb;
  param_stddev_vector ParsOut;
  void between_phases_calculations(void);
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void initialize_model_parameters(void);
  void init_selectivities(void);
  void calc_selectivities(void);
  void calc_fishing_mortality(void);
  void calc_natural_mortality(void);
  void calc_total_mortality(void);
  void calc_molting_probability(void);
 dvar_vector calc_growth_increments(const dvector vSizes, const ivector iSex);
  void calc_growth_increments(void);
  void calc_growth_transition(void);
  void calc_recruitment_size_distribution(void);
  void calc_initial_numbers_at_length(void);
  void update_population_numbers_at_length(void);
  void calc_predicted_catch(void);
 dvariable calc_predicted_catch_det(const int i, const int j, const int h, const int k, const int type, const int unit);
  void calc_predicted_catch_out(void);
  void calc_relative_abundance(void);
  void calc_predicted_composition(void);
  void calc_stock_recruitment_relationship(void);
 dvariable get_prior_pdf(const int &pType, const dvariable &_theta, const double &p1, const double &p2);
  void calc_prior_densities(void);
  void catch_likelihood(void);
  void index_likelihood(void);
  void length_likelihood(void);
  void recruitment_likelihood(void);
  void growth_likelihood(void);
  void calc_objective_function(void);
  void simulation_model(void);
 dvar_vector calc_ssb();
 dvar_matrix calc_brute_equilibrium(const int YrRefSexR1, const int YrRefSexR2, const int YrRef, const int ninit);
 dvar_vector project_biomass(const int YrRef, const int iproj);
 dvar4_array project_one_year(const int i, const int iproj, const int YrRef, dvar_matrix MoltProb,
                                     dvar_matrix rtt, dvar_matrix  rec_sdd, dvar_vector Rec_use, dvar_matrix d4_Pass);
 dvar_vector calc_predicted_project(const int YrRef, dvar3_array d4_Npass, dvar3_array _ft, dvar4_array _Z1, dvar4_array _Z2);
 dvar_vector compute_OFL_and_ABC(const int iyr, dvar_matrix d4_Npass);
 dvar_vector project_biomass_OFL(const int YrRef, const int iproj, dvar_matrix d4_Npass);
 void calc_spr_reference_points2(const int DoProfile);
  void write_eval(void);
  void calc_sdreport(void);
 void get_all_sdnr_MAR();
 dvector calc_sdnr_MAR(dvector tmpVec);
 dvector calc_sdnr_MAR(dmatrix tmpMat);
 dvector calc_Francis_weights();
  void CreateOutput(void);
  void MyOutput(void);

};
#endif
